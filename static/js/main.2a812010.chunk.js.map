{"version":3,"sources":["components/ParticipantForm.tsx","components/RaceTrack.tsx","components/Game.tsx","components/History.tsx","components/RaceResults.tsx","components/App.tsx","index.tsx"],"names":["ANIMAL_OPTIONS","value","label","ParticipantForm","_ref","participants","addParticipant","removeParticipant","name","setName","useState","animal","setAnimal","error","setError","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","trim","some","p","length","selectedAnimal","Math","floor","random","htmlFor","id","type","onChange","target","placeholder","maxLength","map","option","participant","onClick","RaceTrack","raceInProgress","onRaceComplete","runners","setRunners","countdown","setCountdown","intervalRef","useRef","timeoutRef","startTimeRef","completedRef","useEffect","current","countdownInterval","setInterval","prev","clearInterval","startRace","performance","now","lanes","Array","from","_","i","j","index","position","speed","finishTime","lane","obstacle","currentRank","prevRunners","currentRunners","rankedRunners","r","originalIndex","filter","sort","a","b","_a$finishTime","_b$finishTime","runner","rankedRunner","find","indexOf","calculateRanks","speedMultiplier","randomVariation","newSpeed","max","min","newPosition","newFinishTime","checkRaceCompletion","every","results","_runner$finishTime","icon","clearTimeout","style","top","left","right","height","backgroundColor","borderBottom","transform","Game","onRaceEnd","isRacing","setIsRacing","console","log","setTimeout","History","raceHistories","raceIndex","result","toFixed","RaceResults","onNewRace","animation","App","setParticipants","raceHistory","setRaceHistory","isRaceStarted","setIsRaceStarted","currentResults","setCurrentResults","hasCurrentResults","participantsCount","_Fragment","participantName","disabled","slice","startNewRace","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a812010.chunk.js","sourcesContent":["// src/components/ParticipantForm.tsx\nimport React, { useState } from 'react';\nimport { Participant } from './App';\n\ninterface ParticipantFormProps {\n  participants: Participant[];\n  addParticipant: (participant: Participant) => void;\n  removeParticipant: (name: string) => void;\n}\n\nconst ANIMAL_OPTIONS = [\n  { value: '🐎', label: '말' },\n  { value: '🐅', label: '호랑이' },\n  { value: '🐇', label: '토끼' },\n  { value: '🦊', label: '여우' },\n  { value: '🦘', label: '캥거루' },\n  { value: '🦌', label: '사슴' },\n  { value: '🐆', label: '치타' },\n  { value: '🦒', label: '기린' },\n];\n\nconst getRandomAnimal = () => {\n  return ANIMAL_OPTIONS[Math.floor(Math.random() * ANIMAL_OPTIONS.length)].value;\n};\n\nconst ParticipantForm: React.FC<ParticipantFormProps> = ({\n  participants,\n  addParticipant,\n  removeParticipant,\n}) => {\n  const [name, setName] = useState('');\n  const [animal, setAnimal] = useState('random');\n  const [error, setError] = useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!name.trim()) {\n      setError('이름을 입력해주세요');\n      return;\n    }\n\n    if (participants.some(p => p.name === name)) {\n      setError('이미 존재하는 이름입니다');\n      return;\n    }\n\n    if (participants.length >= 15) {\n      setError('최대 15명까지만 참가할 수 있습니다');\n      return;\n    }\n\n    const selectedAnimal = animal === 'random' ? getRandomAnimal() : animal;\n    addParticipant({ name: name.trim(), animal: selectedAnimal });\n    setName('');\n    setAnimal('random');\n    setError('');\n  };\n\n  return (\n    <div className=\"participant-form\">\n      <h2>참가자 등록</h2>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">이름</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            placeholder=\"참가자 이름을 입력하세요\"\n            maxLength={10}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"animal\">동물 선택</label>\n          <select\n            id=\"animal\"\n            value={animal}\n            onChange={(e) => setAnimal(e.target.value)}\n          >\n            <option value=\"random\">🎲 랜덤 선택</option>\n            {ANIMAL_OPTIONS.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.value} {option.label}\n              </option>\n            ))}\n          </select>\n        </div>\n        {error && <div className=\"error-message\">{error}</div>}\n        <button type=\"submit\">참가자 추가</button>\n      </form>\n\n      <div className=\"participants-list\">\n        {participants.map((participant) => (\n          <div key={participant.name} className=\"participant-card\">\n            <div className=\"participant-info\">\n              <span className=\"participant-animal\">{participant.animal}</span>\n              <span className=\"participant-name\">{participant.name}</span>\n            </div>\n            <button\n              className=\"remove-button\"\n              onClick={() => removeParticipant(participant.name)}\n            >\n              삭제\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ParticipantForm;\n","// src/components/RaceTrack.tsx (일부 수정 예시)\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Participant, RaceResult } from './App';\n\ninterface RunnerState {\n  position: number;\n  speed: number;\n  finishTime: number | null;\n  lane: number;\n  obstacle: boolean;\n  currentRank?: number;\n}\n\ninterface RaceTrackProps {\n  participants: Participant[];\n  raceInProgress: boolean;\n  onRaceComplete: (results: RaceResult[]) => void;\n}\n\nconst RaceTrack: React.FC<RaceTrackProps> = ({\n  participants,\n  raceInProgress,\n  onRaceComplete,\n}) => {\n  const finishLine = 90;\n  const [runners, setRunners] = useState<RunnerState[]>([]);\n  const [countdown, setCountdown] = useState<number | null>(null);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const startTimeRef = useRef<number>(0);\n  const completedRef = useRef<boolean>(false);\n\n  // 레이스 초기화\n  useEffect(() => {\n    if (raceInProgress) {\n      completedRef.current = false;\n      setCountdown(3);\n\n      // 카운트다운\n      const countdownInterval = setInterval(() => {\n        setCountdown((prev) => {\n          if (prev === null || prev <= 1) {\n            clearInterval(countdownInterval);\n            startRace();\n            return null;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n\n      return () => {\n        clearInterval(countdownInterval);\n      };\n    }\n  }, [raceInProgress]);\n\n  const calculateRanks = (currentRunners: RunnerState[]) => {\n    // 완주한 선수들의 순위를 먼저 결정\n    const finishedRunners = currentRunners\n      .map((r, index) => ({ ...r, originalIndex: index }))\n      .filter(r => r.finishTime !== null)\n      .sort((a, b) => (a.finishTime ?? 0) - (b.finishTime ?? 0));\n\n    // 아직 달리고 있는 선수들의 순위를 결정\n    const runningRunners = currentRunners\n      .map((r, index) => ({ ...r, originalIndex: index }))\n      .filter(r => r.finishTime === null)\n      .sort((a, b) => b.position - a.position);\n\n    // 최종 순위 배열 생성\n    const rankedRunners = [...finishedRunners, ...runningRunners];\n    \n    // 원래 배열 순서로 다시 정렬하되, 순위 정보 포함\n    return currentRunners.map((runner, i) => {\n      const rankedRunner = rankedRunners.find(r => r.originalIndex === i);\n      return {\n        ...runner,\n        currentRank: rankedRunner ? rankedRunners.indexOf(rankedRunner) + 1 : i + 1\n      };\n    });\n  };\n\n  const startRace = () => {\n    startTimeRef.current = performance.now();\n    \n    // 각 참가자에게 레인 할당\n    const lanes = Array.from({ length: participants.length }, (_, i) => i);\n    for (let i = lanes.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [lanes[i], lanes[j]] = [lanes[j], lanes[i]];\n    }\n\n    setRunners(\n      participants.map((_, index) => ({\n        position: 0,\n        speed: 0.2 + Math.random() * 0.2, // 초기 속도 범위 조정\n        finishTime: null,\n        lane: lanes[index],\n        obstacle: Math.random() > 0.7,\n        currentRank: index + 1\n      }))\n    );\n\n    intervalRef.current = setInterval(() => {\n      setRunners((prevRunners) => {\n        const updatedRunners = prevRunners.map((runner) => {\n          if (runner.finishTime !== null) return runner;\n\n          let speedMultiplier = runner.obstacle ? 0.7 : 1;\n          \n          // 속도 변동성 증가\n          // 기존 속도에서 -50%에서 +50% 사이의 큰 변화를 줌\n          let randomVariation = (Math.random() * 2 - 1) * 0.5; // -0.5에서 0.5 사이의 값\n          let newSpeed = runner.speed * (1 + randomVariation);\n          \n          // 속도 범위 제한 - 너무 빠르거나 느려지지 않도록\n          newSpeed = Math.max(0.05, Math.min(0.6, newSpeed));\n          \n          let newPosition = runner.position + (newSpeed * speedMultiplier);\n          let newFinishTime: number | null = runner.finishTime;\n\n          if (newPosition >= finishLine) {\n            newPosition = finishLine;\n            newFinishTime = (performance.now() - startTimeRef.current) / 1000;\n            newSpeed = 0;\n          }\n\n          return {\n            ...runner,\n            position: newPosition,\n            speed: newSpeed,\n            finishTime: newFinishTime,\n          };\n        });\n\n        return calculateRanks(updatedRunners);\n      });\n    }, 50); // 업데이트 간격 유지\n  };\n\n  // 레이스 종료 체크\n  useEffect(() => {\n    const checkRaceCompletion = () => {\n      if (\n        raceInProgress &&\n        runners.length > 0 &&\n        runners.every((runner) => runner.finishTime !== null) &&\n        !completedRef.current\n      ) {\n        completedRef.current = true;\n        \n        // 인터벌 정리\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n          intervalRef.current = null;\n        }\n\n        // 결과 정렬 및 전달\n        const results: RaceResult[] = runners\n          .map((runner, index) => ({\n            name: participants[index].name,\n            icon: participants[index].animal,\n            finishTime: runner.finishTime ?? 0,\n          }))\n          .sort((a, b) => a.finishTime - b.finishTime);\n\n        // 즉시 결과 전달\n        onRaceComplete(results);\n      }\n    };\n\n    checkRaceCompletion();\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n        timeoutRef.current = null;\n      }\n    };\n  }, [runners, raceInProgress, participants, onRaceComplete]);\n\n  return (\n    <div className=\"race-track-container\">\n      {countdown !== null && (\n        <div className=\"countdown\">\n          <div className=\"countdown-number\">{countdown}</div>\n        </div>\n      )}\n      <div className=\"race-track\">\n        {/* 배경 레인 */}\n        {Array.from({ length: participants.length }).map((_, index) => (\n          <div\n            key={`lane-${index}`}\n            className=\"race-lane\"\n            style={{\n              position: 'absolute',\n              top: `${index * 40}px`,\n              left: 0,\n              right: 0,\n              height: '40px',\n              backgroundColor: index % 2 === 0 ? '#f8f9fa' : '#e9ecef',\n              borderBottom: '1px solid #dee2e6',\n            }}\n          />\n        ))}\n\n        {/* 결승선 */}\n        <div className=\"finish-line\" />\n\n        {/* 참가자들 */}\n        {participants.map((participant, index) => {\n          const runner = runners[index];\n          if (!runner) return null;\n\n          return (\n            <div\n              key={participant.name}\n              className=\"race-lane-container\"\n              style={{\n                position: 'absolute',\n                top: `${runner.lane * 40}px`,\n                left: 0,\n                right: 0,\n                height: '40px',\n              }}\n            >\n              <div\n                className=\"race-participant\"\n                style={{\n                  position: 'absolute',\n                  left: `${runner.position}%`,\n                  top: '50%',\n                  transform: 'translateY(-50%)',\n                }}\n              >\n                <div className=\"participant-rank-container\">\n                  <div className=\"participant-rank\">\n                    {runner.currentRank}위\n                  </div>\n                  <div className=\"participant-animal\">\n                    {participant.animal}\n                  </div>\n                </div>\n              </div>\n              <div className=\"participant-name\" style={{ position: 'absolute', left: '10px', top: '5px' }}>\n                {participant.name}\n              </div>\n              {runner.obstacle && (\n                <span\n                  className=\"obstacle\"\n                  style={{\n                    position: 'absolute',\n                    left: '40%',\n                    top: '50%',\n                    transform: 'translateY(-50%)',\n                  }}\n                >\n                  🌳\n                </span>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default RaceTrack;\n","// src/components/Game.tsx\nimport React, { useState } from 'react';\nimport { Participant, RaceResult } from './App';\nimport RaceTrack from './RaceTrack';\n\ninterface GameProps {\n  participants: Participant[];\n  onRaceEnd: (results: RaceResult[]) => void;\n}\n\nconst Game: React.FC<GameProps> = ({ participants, onRaceEnd }) => {\n  const [isRacing, setIsRacing] = useState(true);\n\n  const handleRaceComplete = (results: RaceResult[]) => {\n    console.log('Race completed in Game component:', results); // 디버깅용 로그\n    setIsRacing(false);\n    // 결과를 즉시 전달하되, 화면 전환을 위한 약간의 지연 추가\n    setTimeout(() => {\n      onRaceEnd(results);\n    }, 500);\n  };\n\n  return (\n    <div className=\"game\">\n      <RaceTrack\n        participants={participants}\n        raceInProgress={isRacing}\n        onRaceComplete={handleRaceComplete}\n      />\n    </div>\n  );\n};\n\nexport default Game;\n","// src/components/History.tsx\nimport React from 'react';\nimport { RaceResult } from './App';\n\ninterface HistoryProps {\n  raceHistories: RaceResult[][];\n}\n\nconst History: React.FC<HistoryProps> = ({ raceHistories }) => {\n  if (raceHistories.length === 0) return null;\n\n  return (\n    <div className=\"history-section\">\n      <h2 className=\"history-title\">경주 기록</h2>\n      <div className=\"history-list\">\n        {raceHistories.map((results, raceIndex) => (\n          <div key={raceIndex} className=\"history-item\">\n            <h3 className=\"race-number\">Race #{raceHistories.length - raceIndex}</h3>\n            <div className=\"results-list\">\n              {results.map((result, position) => (\n                <div\n                  key={result.name}\n                  className={`result-item ${position === 0 ? 'winner' : ''}`}\n                >\n                  <div className=\"position\">\n                    {position === 0 && <span className=\"crown\">👑</span>}\n                    {position + 1}위\n                  </div>\n                  <div className=\"participant-info\">\n                    <span className=\"animal\">{result.icon}</span>\n                    <span className=\"name\">{result.name}</span>\n                  </div>\n                  <div className=\"time\">\n                    {result.finishTime.toFixed(2)}초\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default History;\n","import React from 'react';\nimport { RaceResult } from './App';\n\ninterface RaceResultsProps {\n  results: RaceResult[];\n  onNewRace: () => void;\n}\n\nconst RaceResults: React.FC<RaceResultsProps> = ({ results, onNewRace }) => {\n  return (\n    <div className=\"race-results\">\n      <h2>🏁 경주 결과</h2>\n      <div className=\"results-container\">\n        {results.map((result, index) => (\n          <div \n            key={result.name} \n            className={`result-item ${index === 0 ? 'winner' : ''}`}\n            style={{\n              animation: `slideIn ${0.3 + index * 0.1}s ease-out`\n            }}\n          >\n            <div className=\"rank\">\n              {index === 0 && <span className=\"crown\">👑</span>}\n              {index + 1}위\n            </div>\n            <div className=\"participant-info\">\n              <span className=\"animal\">{result.icon}</span>\n              <span className=\"name\">{result.name}</span>\n            </div>\n            <div className=\"finish-time\">\n              {result.finishTime.toFixed(2)}초\n            </div>\n          </div>\n        ))}\n      </div>\n      <button className=\"new-race-button\" onClick={onNewRace}>\n        새로운 경주 시작\n      </button>\n    </div>\n  );\n};\n\nexport default RaceResults; ","// src/components/App.tsx\nimport React, { useState } from 'react';\nimport ParticipantForm from './ParticipantForm';\nimport Game from './Game';\nimport History from './History';\nimport RaceResults from './RaceResults';\nimport './App.css';\n\n// 참가자 및 경주 결과 타입 정의\nexport interface Participant {\n  name: string;\n  animal: string;\n}\n\n// finishTime: 완주 시간(초)\nexport interface RaceResult {\n  name: string;\n  icon: string;\n  finishTime: number;\n}\n\nconst App: React.FC = () => {\n  const [participants, setParticipants] = useState<Participant[]>([]);\n  const [raceHistory, setRaceHistory] = useState<RaceResult[][]>([]);\n  const [isRaceStarted, setIsRaceStarted] = useState(false);\n  const [currentResults, setCurrentResults] = useState<RaceResult[] | null>(null);\n\n  const addParticipant = (participant: Participant) => {\n    setParticipants((prev) => [...prev, participant]);\n  };\n\n  const removeParticipant = (participantName: string) => {\n    setParticipants((prev) => prev.filter(p => p.name !== participantName));\n  };\n\n  const startRace = () => {\n    setIsRaceStarted(true);\n    setCurrentResults(null);\n  };\n\n  const handleRaceEnd = (results: RaceResult[]) => {\n    console.log('Race ended with results:', results); // 디버깅용 로그\n    setCurrentResults(results);\n    setRaceHistory((prev) => [results, ...prev].slice(0, 5));\n    setIsRaceStarted(false);\n  };\n\n  const startNewRace = () => {\n    setCurrentResults(null);\n  };\n\n  console.log('Current state:', { // 디버깅용 로그\n    isRaceStarted,\n    hasCurrentResults: currentResults !== null,\n    participantsCount: participants.length\n  });\n\n  return (\n    <div className=\"app\">\n      <h1>🏃‍♂️ 동물 레이스 게임 🏃‍♀️</h1>\n      {!isRaceStarted && !currentResults && (\n        <>\n          <ParticipantForm \n            participants={participants} \n            addParticipant={addParticipant} \n            removeParticipant={removeParticipant} \n          />\n          <button \n            onClick={startRace} \n            disabled={participants.length < 2}\n            className=\"start-race-button\"\n          >\n            {participants.length < 2 \n              ? '최소 2명의 참가자가 필요합니다' \n              : '경주 시작!'}\n          </button>\n        </>\n      )}\n      \n      {isRaceStarted && (\n        <Game \n          participants={participants} \n          onRaceEnd={handleRaceEnd} \n        />\n      )}\n\n      {currentResults && !isRaceStarted && (\n        <RaceResults \n          results={currentResults} \n          onNewRace={startNewRace} \n        />\n      )}\n\n      {raceHistory.length > 0 && <History raceHistories={raceHistory} />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles/App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}