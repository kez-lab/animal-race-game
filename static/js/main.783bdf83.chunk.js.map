{"version":3,"sources":["components/ParticipantForm.tsx","components/RaceTrack.tsx","components/Game.tsx","components/History.tsx","components/App.tsx","index.tsx"],"names":["animals","ParticipantForm","_ref","participants","addParticipant","removeParticipant","name","setName","useState","selectedAnimal","setSelectedAnimal","nameInputRef","useRef","_jsxs","className","children","_jsx","ref","type","placeholder","value","onChange","e","target","map","animal","idx","onClick","handleAddParticipant","trim","alert","some","p","toLowerCase","animalToAssign","Math","floor","random","length","current","focus","participant","index","handleRemoveParticipant","RaceTrack","raceInProgress","onRaceComplete","runners","setRunners","intervalRef","timeoutRef","startTimeRef","completedRef","useEffect","performance","now","position","speed","finishTime","setInterval","prevRunners","runner","newPosition","newSpeed","newFinishTime","clearInterval","every","results","i","_runners$i$finishTime","icon","sort","a","b","setTimeout","clearTimeout","style","height","border","marginBottom","overflow","left","top","bottom","width","backgroundColor","_runners$index$positi","_runners$index","transition","display","alignItems","marginRight","fontSize","Game","onRaceEnd","setRaceInProgress","setResults","finalResults","result","toFixed","startRace","disabled","History","raceHistories","slicedData","slice","race","raceIndex","App","setParticipants","raceHistory","setRaceHistory","isRaceStarted","setIsRaceStarted","raceResults","setRaceResults","prev","_Fragment","participantName","filter","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.783bdf83.chunk.js","sourcesContent":["// src/components/ParticipantForm.tsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Participant } from './App';\n\ninterface ParticipantFormProps {\n  participants: Participant[];\n  addParticipant: (participant: Participant) => void;\n  removeParticipant: (participantName: string) => void;\n}\n\nconst animals = ['🐶', '🐱', '🐰', '🐢', '🐴'];\n\nconst ParticipantForm: React.FC<ParticipantFormProps> = ({ participants, addParticipant, removeParticipant }) => {\n  const [name, setName] = useState('');\n  // 기본 선택값은 \"random\"으로 고정 (메뉴에는 \"Random Animal\"이 표시됨)\n  const [selectedAnimal, setSelectedAnimal] = useState('random');\n  const nameInputRef = useRef<HTMLInputElement>(null);\n\n  const handleAddParticipant = () => {\n    if (!name.trim()) {\n      alert('이름을 입력해주세요.');\n      return;\n    }\n    // 이름 중복 체크 (대소문자 구분 없이)\n    if (participants.some(p => p.name.toLowerCase() === name.trim().toLowerCase())) {\n      alert('이미 존재하는 이름입니다. 다른 이름을 입력해주세요.');\n      return;\n    }\n    // selectedAnimal 값이 \"random\"이면 실제 랜덤 동물을 할당\n    const animalToAssign =\n      selectedAnimal === 'random'\n        ? animals[Math.floor(Math.random() * animals.length)]\n        : selectedAnimal;\n    addParticipant({ name: name.trim(), animal: animalToAssign });\n    setName('');\n    // 다시 기본값으로 \"random\" 설정\n    setSelectedAnimal('random');\n    // 추가 후 입력란 포커스 유지\n    if (nameInputRef.current) {\n      nameInputRef.current.focus();\n    }\n  };\n\n  const handleRemoveParticipant = (index: number) => {\n    removeParticipant(participants[index].name);\n  };\n\n  return (\n    <div className=\"participant-form\">\n      <h2>Join the Race</h2>\n      <input\n        ref={nameInputRef}\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <select\n        value={selectedAnimal}\n        onChange={(e) => setSelectedAnimal(e.target.value)}\n      >\n        <option value=\"random\">Random Animal</option>\n        {animals.map((animal, idx) => (\n          <option key={idx} value={animal}>\n            {animal}\n          </option>\n        ))}\n      </select>\n      <button onClick={handleAddParticipant}>Add Participant</button>\n      <ul>\n        {participants.map((participant, index) => (\n          <li key={index}>\n            {participant.name} ({participant.animal})\n            <button onClick={() => handleRemoveParticipant(index)}>Remove</button>\n          </li>\n        ))}\n      </ul>\n      {participants.length < 1 && <p>At least one participant is required.</p>}\n    </div>\n  );\n};\n\nexport default ParticipantForm;\n","// src/components/RaceTrack.tsx (일부 수정 예시)\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Participant, RaceResult } from './App';\n\ninterface RunnerState {\n  position: number;\n  speed: number;\n  finishTime: number | null;\n}\n\ninterface RaceTrackProps {\n  participants: Participant[];\n  raceInProgress: boolean;\n  onRaceComplete: (results: RaceResult[]) => void;\n}\n\nconst RaceTrack: React.FC<RaceTrackProps> = ({ participants, raceInProgress, onRaceComplete }) => {\n  const finishLine = 95;\n  const [runners, setRunners] = useState<RunnerState[]>([]);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const startTimeRef = useRef<number>(0);\n  const completedRef = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (raceInProgress) {\n      completedRef.current = false;\n      startTimeRef.current = performance.now();\n      setRunners(\n        participants.map(() => ({\n          position: 0,\n          speed: Math.random() * 2 + 0.7,\n          finishTime: null,\n        }))\n      );\n      // 업데이트 간격을 300ms로 설정\n      intervalRef.current = setInterval(() => {\n        setRunners(prevRunners =>\n          prevRunners.map(runner => {\n            if (runner.finishTime !== null) return runner;\n            let newPosition = runner.position + runner.speed;\n            let newSpeed = (Math.random() * 2 + 0.7);\n            let newFinishTime: number | null = runner.finishTime;\n            if (newPosition >= finishLine) {\n              newPosition = finishLine;\n              newFinishTime = (performance.now() - startTimeRef.current) / 1000;\n              newSpeed = 0;\n            }\n            return {\n              position: newPosition,\n              speed: newSpeed,\n              finishTime: newFinishTime,\n            };\n          })\n        );\n      }, 250);\n    }\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [raceInProgress, participants]);\n\n  useEffect(() => {\n    if (\n      raceInProgress &&\n      runners.length > 0 &&\n      runners.every(runner => runner.finishTime !== null) &&\n      !completedRef.current\n    ) {\n      completedRef.current = true;\n      if (intervalRef.current) clearInterval(intervalRef.current);\n      const results: RaceResult[] = participants.map((participant, i) => ({\n        name: participant.name,\n        icon: participant.animal,\n        finishTime: runners[i].finishTime ?? 0,\n      }));\n      results.sort((a, b) => a.finishTime - b.finishTime);\n      timeoutRef.current = setTimeout(() => {\n        onRaceComplete(results);\n      }, 0);\n    }\n    return () => {\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\n    };\n  }, [runners, raceInProgress, participants, onRaceComplete]);\n\n  return (\n    <div\n      className=\"race-track\"\n      style={{\n        position: 'relative',\n        height: `${participants.length * 60}px`,\n        border: '1px solid #000',\n        marginBottom: '20px',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        style={{\n          position: 'absolute',\n          left: `${finishLine}%`,\n          top: 0,\n          bottom: 0,\n          width: '5px',\n          backgroundColor: 'red',\n        }}\n      />\n      {participants.map((participant, index) => (\n        <div\n          key={index}\n          className=\"race-participant\"\n          style={{\n            position: 'absolute',\n            left: `${runners[index]?.position ?? 0}%`,\n            top: `${index * 60 + 10}px`,\n            transition: 'left 0.3s linear',\n            display: 'flex',\n            alignItems: 'center',\n            width: '150px',\n          }}\n        >\n          <span style={{ marginRight: '8px', fontSize: '1.5rem' }}>{participant.animal}</span>\n          <span>{participant.name}</span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default RaceTrack;\n","// src/components/Game.tsx\nimport React, { useState } from 'react';\nimport { Participant, RaceResult } from './App';\nimport RaceTrack from './RaceTrack';\n\ninterface GameProps {\n  participants: Participant[];\n  onRaceEnd: (results: RaceResult[]) => void;\n}\n\nconst Game: React.FC<GameProps> = ({ participants, onRaceEnd }) => {\n  const [raceInProgress, setRaceInProgress] = useState<boolean>(false);\n  const [results, setResults] = useState<RaceResult[]>([]);\n\n  const startRace = () => {\n    setRaceInProgress(true);\n    setResults([]); // 이전 결과 초기화\n  };\n\n  // RaceTrack에서 레이스 완료 시 호출하는 콜백\n  const handleRaceComplete = (finalResults: RaceResult[]) => {\n    setResults(finalResults);\n    setRaceInProgress(false);\n    onRaceEnd(finalResults);\n  };\n\n  return (\n    <div className=\"game-container\">\n      <RaceTrack\n        participants={participants}\n        raceInProgress={raceInProgress}\n        onRaceComplete={handleRaceComplete}\n      />\n      {results.length > 0 && (\n        <div className=\"results\">\n          <h2>Race Results</h2>\n          <ul>\n            {results.map((result, index) => (\n              <li key={index}>\n                {result.name} - {index + 1} place (Time: {result.finishTime.toFixed(5)}s)\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <button onClick={startRace} disabled={raceInProgress}>\n        Start Race\n      </button>\n    </div>\n  );\n};\n\nexport default Game;\n","// src/components/History.tsx\nimport React from 'react';\nimport { RaceResult } from './App';\n\ninterface HistoryProps {\n  raceHistories: RaceResult[][];\n}\n\nconst History: React.FC<HistoryProps> = ({ raceHistories }) => {\n  if (!raceHistories || raceHistories.length === 0) {\n    return <div>No race history available</div>;\n  }\n\n  // raceHistories 배열의 첫 5개 항목 사용 (최신순으로 정렬되어 있다고 가정)\n  const slicedData = raceHistories.slice(0, 5);\n\n  return (\n    <div className=\"history\">\n      <h2>Race History</h2>\n      <ul>\n        {slicedData.map((race, raceIndex) => (\n          <li key={raceIndex}>\n            <h3>Race {raceIndex + 1}</h3>\n            <ul>\n              {race.map((result, idx) => (\n                <li key={idx}>\n                  {result.name} {result.icon} - Time: {result.finishTime.toFixed(5)}s\n                </li>\n              ))}\n            </ul>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default History;\n","// src/components/App.tsx\nimport React, { useState } from 'react';\nimport ParticipantForm from './ParticipantForm';\nimport Game from './Game';\nimport History from './History';\nimport './App.css';\n\n// 참가자 및 경주 결과 타입 정의\nexport interface Participant {\n  name: string;\n  animal: string;\n}\n\n// finishTime: 완주 시간(초)\nexport interface RaceResult {\n  name: string;\n  icon: string;\n  finishTime: number;\n}\n\nconst App: React.FC = () => {\n  const [participants, setParticipants] = useState<Participant[]>([]);\n  const [raceHistory, setRaceHistory] = useState<RaceResult[][]>([]);\n  const [isRaceStarted, setIsRaceStarted] = useState(false);\n  const [raceResults, setRaceResults] = useState<RaceResult[] | null>(null);\n\n  const addParticipant = (participant: Participant) => {\n    setParticipants((prev) => [...prev, participant]);\n  };\n\n  const removeParticipant = (participantName: string) => {\n    setParticipants((prev) => prev.filter(p => p.name !== participantName));\n  };\n\n  const startRace = () => {\n    setIsRaceStarted(true);\n    // 경주는 Game 컴포넌트에서 처리됩니다.\n  };\n\n  const handleRaceEnd = (results: RaceResult[]) => {\n    setRaceResults(results);\n    setRaceHistory((prev) => [results, ...prev].slice(0, 5));\n    setIsRaceStarted(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Animal Race Game</h1>\n      {!isRaceStarted ? (\n        <>\n          <ParticipantForm \n            participants={participants} \n            addParticipant={addParticipant} \n            removeParticipant={removeParticipant} \n          />\n          <button onClick={startRace} disabled={participants.length === 0}>\n            Start Race\n          </button>\n        </>\n      ) : (\n        <Game participants={participants} onRaceEnd={handleRaceEnd} />\n      )}\n      <History raceHistories={raceHistory} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles/App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}